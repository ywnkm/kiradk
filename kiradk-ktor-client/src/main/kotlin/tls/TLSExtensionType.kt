package kiradk.client.tls

public enum class TLSExtensionType(public val code: Int) {
    ServerName(0x0000),
    MaxFragmentLength(0x0001),
    ClientCertificateURL(0x0002),
    TrustedCAKeys(0x0003),
    TruncatedHMAC(0x0004),
    StatusRequest(0x0005),
    UserMapping(0x0006),
    ClientAuthz(0x0007),
    ServerAuthz(0x0008),
    CertificateType(0x0009),
    SupportedGroups(0x000a),
    ECPointsFormat(0x000b),
    SRP(0x000c),
    SignatureAlgorithms(0x000d),
    UseSRTP(0x000e),
    Heartbeat(0x000f),
    ALPN(0x0010),
    StatusRequestV2(0x0011),
    SignedCertificateTimestamp(0x0012),
    ClientCertificateType(0x0013),
    ServerCertificateType(0x0014),
    Padding(0x0015),
    EncryptThenMAC(0x0016),
    ExtendedMasterSecret(0x0017),
    TokenBinding(0x0018),
    CachedInfo(0x0019),
    TLS_LTS(0x001a),
    CompressCertificate(0x001b),
    RecordSizeLimit(0x001c),
    PWDProtect(0x001d),
    PWDClear(0x001e),
    PasswordSalt(0x001f),
    TicketPinning(0x0020),
    TLSCertWithExternPsk(0x0021),
    DelegatedCredential(0x0022),
    SessionTicket(0x0023),
    TLMSP(0x0024),
    TLMSPProxying(0x0025),
    TLMSPDelegate(0x0026),
    SupportedEKTCiphers(0x0027),
    PreSharedKey(0x0029),
    EarlyData(0x002a),
    SupportedVersions(0x002b),
    Cookie(0x002c),
    PSKKeyExchangeModes(0x002d),
    CertificateAuthorities(0x002f),
    OIDFilters(0x0030),
    PostHandshakeAuth(0x0031),
    SignatureAlgorithmsCert(0x0032),
    // KeyShareOld(0x0033),
    TransparencyInfo(0x0034),
    // ConnectionID(0x0036),
    ConnectionSessionID(0x0037),
    ExternalSessionId(0x0038),
    QuicTransportParameters(0x0039),
    TicketRequest(0x003a),
    DnssecChain(0x003b),
    RenegotiationInfo(0xff01);

    public companion object {

        public fun byCode(code: Int): TLSExtensionType {
            return entries.find { it.code == code } ?: throw IllegalArgumentException("Unknown extension type:  $code")
        }
    }
}
